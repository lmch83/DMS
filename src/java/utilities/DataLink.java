/*
 * Feel free to edit, copy and reuse the resources
 * available in this project, unless you are going to use autogenerated
 * code where different licences might apply. It is your responsibility
 * to ensure that you posses the right to modify, copy or reuse such 
 * resources.
 */
package utilities;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;

/**
 * This class provides methods for database 
 * connectivity and retrieval of data.
 *
 * @author Lukasz Chlodnicki
 */
public class DataLink
{

    /**
     * Method to initiate connection with the database Available to use within
     * this class only.
     *
     * @return SQL statement object Statement
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    private Statement connect() throws ClassNotFoundException, SQLException
    {
        Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
        Connection con = DriverManager.getConnection(
                "jdbc:derby://localhost:1527/DMS", "luc", "luc");
        return con.createStatement();
    }

    /**
     * Method that retrieves a single attribute from database based on provided
     * parameters.
     *
     * @param tableName
     * @param colIn
     * @param value
     * @param colOut
     * @return
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    public String conditionalSearch(String tableName, String colIn, String value,
            String colOut) throws ClassNotFoundException, SQLException
    {
        Statement st = connect();
        String g = "";
        ResultSet s = st.executeQuery(
                "SELECT * FROM " + tableName);
        while (s.next())
        {
            if (s.getString(colIn).equals(value))
            {
                g = s.getString(colOut);
            }
        }
        return g;
    }

    /**
     * This method establishes connection with the database to retrieve the
     * whole column from table
     *
     * @param table the database table name
     * @param column the database column name
     * @return set of the values
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    public Set<String> getDbColumn(String table, String column) throws ClassNotFoundException, SQLException
    {
        Statement st = connect();
        Set<String> des = new HashSet<String>();
        ResultSet rs = st.executeQuery("Select " + column + " From " + table);
        while (rs.next())
        {
            des.add(rs.getString(column));
        }
        return des;
    }

    /**
     * This method updates database attribute with
     * new value.
     * @param table the table to update
     * @param column the column to update
     * @param newValue the new value
     * @param indexColumn the index column 
     * @param indexValue the index
     * @throws ClassNotFoundException
     * @throws SQLException 
     */
    public void updateAttribute(String table, String column, String newValue,
            String indexColumn, String indexValue) throws ClassNotFoundException, SQLException
    {
        Statement st = connect();
        st.executeUpdate("UPDATE " + table + " SET " + column + "=" + newValue + " WHERE " 
        + indexColumn + "=" + indexValue);
    }

}
