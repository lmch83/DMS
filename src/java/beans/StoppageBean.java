/*
 * Feel free to edit, copy and reuse the resources
 * available in this project, unless you are going to use autogenerated
 * code where different licences might apply. It is your responsibility
 * to ensure that you posses the right to modify, copy or reuse such 
 * resources.
 */
package beans;

import core.Stoppage;
import java.io.Serializable;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Set;
import javax.annotation.ManagedBean;
import javax.enterprise.context.SessionScoped;
import javax.inject.Named;
import utilities.DataLink;

/**
 * This class orchestrate stoppages. It activates and deactivates downtime and
 * updates database records.
 *
 * @author Lukasz Chlodnicki
 */
@Named
@ManagedBean
@SessionScoped

public class StoppageBean implements Serializable
{

    private Set<String> descriptions;
    private String searchDescription;
    private String solution = "";
    private String startTime = "";
    private String endTime = "";
    private int occurencies = 1;
    private String descr = "";
    private String lineID = "";
    private String area = "";
    private Stoppage stoppage = new Stoppage();
    private Date date = new Date();

    public Date getDate()
    {
        return date;
    }

    public void setDate(Date date)
    {
        this.date = date;
    }

    public Stoppage getStoppage()
    {
        return stoppage;
    }

    public void setStoppage(Stoppage stoppage)
    {
        this.stoppage = stoppage;
    }

    /**
     * This getter method generates the current time each time it is called.
     *
     * @return the formatted String
     */
    public String getStartTime()
    {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        String g = sdf.format(date);
        return g;
    }

    public void setStartTime(String startTime)
    {
        this.startTime = startTime;
    }

    public String getEndTime()
    {
        return endTime;
    }

    public void setEndTime(String endTime)
    {
        this.endTime = endTime;
    }

    public int getOccurencies()
    {
        return occurencies;
    }

    public void setOccurencies(int occurencies)
    {
        this.occurencies = occurencies;
    }

    public String getDescr()
    {
        return descr;
    }

    public void setDescr(String descr)
    {
        this.descr = descr;
    }

    public String getLineID()
    {
        return lineID;
    }

    public void setLineID(String lineID)
    {
        this.lineID = lineID;
    }

    public String getArea()
    {
        return area;
    }

    public void setArea(String area)
    {
        this.area = area;
    }

    public Set<String> getDescriptions()
    {
        return descriptions;
    }

    public void setDescriptions(Set<String> descriptions)
    {
        this.descriptions = descriptions;
    }

    public String getSearchDescription()
    {
        return searchDescription;
    }

    public void setSearchDescription(String searchDescription)
    {
        this.searchDescription = searchDescription;
    }

    public String getSolution()
    {
        return solution;
    }

    public void setSolution(String solution)
    {
        this.solution = solution;
    }

    /**
     * This method retrieves stoppage descriptions from the database and updates
     * descriptions variable. Required to populate hints for reoccuring
     * stoppages.
     *
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    public void populateDescriptions() throws ClassNotFoundException, SQLException
    {
        String n = "";
        DataLink dl = new DataLink(); // comunicate with the database via DataLink object
        Set<String> ds = dl.getDbColumn("stoppage", "description");
        this.setDescriptions(ds);
    }

    /**
     * This method activates downtime by populating the stoppage attribute with
     * initial values.
     *
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    public void activateDowntime() throws ClassNotFoundException, SQLException
    {
        this.getStoppage().setAreaID(area);
        this.getStoppage().setStartTime(this.getStartTime());
        this.getStoppage().setLineID(this.getLineID());
        this.setDescr(descr);
        this.getStoppage().setDescription(descr);

        //the below ID is fixed to test if the function works the ID in the final application
        //would have to be created based on the last record for stoppages in the database.
        this.getStoppage().setStoppageID("s03");

        DataLink dl = new DataLink();
        //the variables below adds the single
        //quotes to the String representing values
        //in data tables. It is neccessary for the 
        //sql statement to execute properly
        String ls = "'INACTIVE'";
        String lineCode = "'" + this.stoppage.getLineID() + "'";
        //update the line's status in the database
        //this code won't work properly until changes are made in DataBean class
        //and current class and then stoppages.xhtml. For now it will constantly update
        //the same line's status.
        dl.updateAttribute("line", "line_status", ls, "line_id", lineCode);

        //Checking if the method produces the expected output
        System.out.println("STOPPAGE ID " + this.getStoppage().getStoppageID()
                + " FOR " + this.getStoppage().getAreaID() + " STARTED AT " + this.getStoppage().getStartTime()
                + " LINE " + this.getStoppage().getLineID() + " FAULT: " + this.getStoppage().getDescription());
    }

    /**
     * This method deactivates downtime and updates database records (not
     * implemented yet)
     */
    public void deactivateDowntime()
    {
        this.setEndTime(this.getStartTime());
        this.getStoppage().setEndTime(this.getEndTime());
        this.getStoppage().setSolution(this.getSolution());

        //in the final version of the application it will calculate the number
        //of occurencies based on the value in the database 
        //currently the number is fixed
        this.getStoppage().setOccurencies(2);

        //this line of code should make use of the function
        //(not implemented yet) that calculates the lenght 
        //of the stoppage and set the duration accordingly.
        this.getStoppage().setDuration("20 minutes");

        //Checking if the method produces the expected output
        System.out.println("STOPPAGE ID " + this.getStoppage().getStoppageID()
                + " FOR " + this.getStoppage().getAreaID() + " STARTED AT " + this.getStoppage().getStartTime()
                + " LINE " + this.getStoppage().getLineID() + " FAULT: " + this.getStoppage().getDescription()
                + " DEACTIVATED AT " + this.getStoppage().getEndTime() + " SUGGESTED SOLUTION "
                + this.getStoppage().getSolution() + " OCCURED " + this.getStoppage().getOccurencies()
                + " TIMES " + " LASTED FOR " + this.getStoppage().getDuration());
    }

}
