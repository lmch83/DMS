/*
 * Feel free to edit, copy and reuse the resources
 * available in this project, unless you are going to use autogenerated
 * code where different licences might apply. It is your responsibility
 * to ensure that you posses the right to modify, copy or reuse such 
 * resources.
 */
package servlets;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.annotation.HttpConstraint;
import javax.servlet.annotation.ServletSecurity;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * This servlet redirects the user to
 * the appropriate access page which relies
 * on the user's role.
 * @author Lukasz Chlodnicki
 */
@WebServlet(name = "LoginServlet", urlPatterns =
{
    "/LoginServlet"
})

//The roles allowed for this servlet
@ServletSecurity(
        @HttpConstraint(rolesAllowed =
        {
            "MTL", "ETL", "SOM", "OPE"
}))
public class LoginServlet extends HttpServlet
{

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request,
            HttpServletResponse response)
            throws ServletException, IOException
    {
        response.setContentType("text/html;charset=UTF-8");
        
        String name = request.getRemoteUser(); //get role
        if (request.isUserInRole(null))
        {
            request.getRequestDispatcher("/error.html").forward(request, response); // go to error page if no credentials are provided
        }
        if (request.isUserInRole("MTL")) //MTL access behaviour
        {
            request.getRequestDispatcher("access/mtl.html").forward(
                    request,
                    response);
        }
        if (request.isUserInRole("ETL")) //ETL access behaviour
        {
            request.getRequestDispatcher("access/etl.html").forward(
                    request,
                    response);
        }
        if (request.isUserInRole("SOM")) //SOM access behaviour
        {
            request.getRequestDispatcher("access/som.html").forward(
                    request,
                    response);
        }
        if (request.isUserInRole("OPE")) //Operator access behaviour
        {
            request.getRequestDispatcher("access/ope.html").forward(
                    request,
                    response);
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request,
            HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request,
            HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo()
    {
        return "Short description";
    }// </editor-fold>

}
